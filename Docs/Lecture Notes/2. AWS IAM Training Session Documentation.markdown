# AWS IAM Training Session Documentation

This document provides a comprehensive overview of the AWS Identity and Access Management (IAM) training sessions conducted on May 5, 2025, and May 11, 2025. It covers the theoretical concepts, practical demonstrations, examples, interview questions, and participant queries, ensuring all context from the sessions is captured.

---

## Session 1: Introduction to AWS IAM (May 5, 2025)

### Overview
The first session introduced AWS IAM, focusing on its purpose, key components, and practical setup. Technical issues with the Learning Management System (LMS) and Zoom caused disruptions, leading to the session's cancellation. The instructor provided a basic overview of IAM, demonstrated user creation, and addressed participant questions.

### Technical Issues
- **LMS Unavailability**: The LMS was down, causing a gateway timeout and preventing session initiation.
- **Zoom Glitch**: The sports team reported issues with Zoom, which delayed the session start.
- **Resolution**: The session was canceled as per the sports team's directive, and participants were informed to resume on May 7, 2025, with a mentor session scheduled for May 6, 2025.

### Key Concepts Covered
1. **What is IAM?**
   - IAM stands for **Identity and Access Management**.
   - It manages users, permissions, and access to AWS resources.
   - Purpose: To add users and assign permissions based on their roles.
   - Example: In a company, IAM ensures interns do not have admin access, while managers have appropriate permissions.

2. **IAM in Real-World Scenarios**
   - **LMS Example**: The instructor's LMS access differs from students' access, demonstrating role-based permissions.
   - **PUBG Analogy**: A PUBG team has roles (fighter, looter, backup), similar to industry roles (developers, testers, managers) with distinct access levels.
   - **Reliance Example**: Mukesh Ambani, as the owner (root user), has unrestricted access, unlike employees (IAM users).

3. **Root User vs. IAM User**
   - **Root User**:
     - The account owner with unrestricted access.
     - Can perform any action (e.g., start/stop services, close accounts).
     - Example: Mukesh Ambani can sell or shut down Reliance.
   - **IAM User**:
     - Employees with restricted access based on assigned permissions.
     - Example: Sundar Pichai (CEO of Google) has less access than Larry Page (founder).

4. **Deny by Default**
   - Newly created IAM users have no access until permissions are explicitly granted.
   - Example: A new employee at TCS cannot access projects without assigned permissions.

### Practical Demonstration
- **Creating an IAM User**:
  1. Navigate to the IAM console.
  2. Select **Users** > **Create User**.
  3. Enter a username (e.g., `TarangGupta`).
  4. Enable **Console Access** for AWS Management Console login.
  5. Choose **Custom Password** (e.g., `Karan@123`) or auto-generated password.
  6. Optionally, require password reset on first login.
  7. Skip permissions for now and create the user.
  - **Outcome**: The user `TarangGupta` was created with no permissions, resulting in "Access Denied" for all services.

- **Logging in as an IAM User**:
  1. Open a private browser window or different browser.
  2. Access the AWS sign-in page.
  3. Enter the **Account ID** (unique to the AWS account), username (`TarangGupta`), and password (`Karan@123`).
  4. Result: The user logged in but saw "Access Denied" for all services due to no permissions.

- **Account ID Explanation**:
  - Analogous to a PUBG room ID, the AWS Account ID is a unique identifier for the AWS account, shared with users for login.

### Participant Questions and Answers
1. **Is the instructor audible and screen visible?**
   - Yes, confirmed by participants after resolving initial network issues.
2. **How many participants have an AWS account?**
   - Most participants confirmed having an AWS account, except Suresh, who was advised to create one for practical sessions.
3. **What is IAM and its usage?**
   - IAM manages users and permissions. Example: It controls access to LMS courses, ensuring instructors and students have different privileges.
4. **Is the instructor’s LMS the same as students’?**
   - No, the instructor’s LMS has limited access (e.g., only DevOps course), while students have access to their enrolled courses.
5. **Should different entities (instructor, student, admin) have the same access?**
   - No, each entity should have distinct access based on their role to prevent unauthorized actions.
6. **Can a root user do anything in their organization?**
   - Yes, the root user (e.g., Mukesh Ambani) has unrestricted control, including closing or selling the company.
7. **Why create IAM users instead of multiple AWS accounts?**
   - A single AWS account is used, and IAM users are added with specific permissions to manage access efficiently.

### Interview Questions
1. **What is IAM, and how is it utilized?**
   - IAM is Identity and Access Management, used to manage users and permissions. Example: It assigns developers access to specific servers while restricting interns.
2. **What is the role of IAM?**
   - IAM adds users and assigns permissions based on their roles, ensuring secure and controlled access to resources.

### Additional Notes
- **Mentor Session**: Scheduled for May 6, 2025, as a Q&A session, not mandatory, with no attendance tracking.
- **Recording Availability**: The session recording was half-complete due to cancellation but available for review.
- **Contact Information**: The instructor shared their contact number for support, to be handled by Vikul or Chiti Babu for mentor sessions.

---

## Session 2: AWS IAM Deep Dive (May 11, 2025)

### Overview
The second session resumed after a break, diving deeper into IAM concepts, including users, policies, groups, roles, and Multi-Factor Authentication (MFA). The session included practical demonstrations, interview questions, and a quiz to reinforce learning. All participants confirmed having AWS accounts, enabling a practical-focused session.

### Key Concepts Covered
1. **Recap of IAM**
   - **Definition**: IAM (Identity and Access Management) controls user identities and access to AWS services.
   - **PUBG Analogy**: Different roles in PUBG (fighter, looter, backup) mirror industry roles (developers, testers, managers) with distinct access.
   - **Industry Example**: Managers have full access, developers have server-specific access, and testers have limited access.
   - **Root User**: The account owner (e.g., Mukesh Ambani) with unrestricted access.
   - **IAM Users**: Employees with restricted access based on policies.

2. **IAM Components**
   - **Users**: Individual identities with usernames and passwords.
   - **Policies**: Define permissions (e.g., EC2 access, IAM access).
   - **Groups**: Collections of users with shared permissions.
   - **Roles**: Temporary access for users or services, used for demos or service integration.
   - **MFA**: Multi-Factor Authentication for enhanced security.

3. **Deny by Default**
   - IAM users have no access until policies are attached.
   - Example: A new StarAgile user cannot access other courses without assigned permissions.

4. **Policies**
   - **AWS-Managed Policies**: Predefined policies for services (e.g., EC2, IAM).
   - **Custom Policies**: User-defined policies for specific needs.
   - **Inline Policies**: Policies directly attached to a user or group.
   - **Policy Structure** (JSON format):
     - **Effect**: Allow or Deny.
     - **Action**: Specific actions (e.g., `ec2:StartInstances`).
     - **Resource**: Resources affected (e.g., all EC2 instances).
   - Example:
     ```json
     {
       "Effect": "Allow",
       "Action": "ec2:*",
       "Resource": "*"
     }
     ```

5. **Groups**
   - Used to assign generic permissions to multiple users.
   - Example: A DevOps team group with EC2 and Lambda access for all members.
   - **Best Practice**: Assign policies to groups instead of individual users for centralized management.

6. **Roles**
   - Provide temporary access for users or services.
   - **Use Cases**:
     - Demo or Proof of Concept (POC) access.
     - Service integration (e.g., EC2 accessing S3).
   - **Trust Relationship**: Specifies who (user or service) can assume the role.
   - **Duration**: 1–12 hours, automatically expires.
   - **ARN**: Amazon Resource Name, a unique identifier for users or roles.

7. **MFA**
   - **Definition**: Multi-Factor Authentication adds an extra security layer (e.g., OTP, authenticator apps).
   - **Examples**: Google Authenticator, Microsoft Authenticator, hardware tokens.
   - **Setup Process**:
     1. Go to **Security Credentials** > **Assign MFA**.
     2. Choose an authenticator app (e.g., Google Authenticator).
     3. Scan the QR code with the app.
     4. Enter the generated code (changes every 30 seconds).
     5. MFA is activated, requiring a code for login.

8. **Best Practices**
   - Create individual users with least privilege.
   - Use groups for centralized permission management.
   - Implement MFA for all users.
   - Rotate credentials regularly.
   - Avoid using root user for daily tasks.
   - Use separate AWS accounts, not Amazon.com shopping accounts.

9. **IAM Characteristics**
   - **Cost**: Free service.
   - **Scope**: Global, not regional.
   - **Access**: Denied by default.
   - **Users**: Root user (unrestricted) and IAM users (restricted).

### Practical Demonstrations
1. **Creating an IAM User**:
   - **Steps**:
     1. Navigate to IAM > **Users** > **Create User**.
     2. Enter username (e.g., `PostDevOps`).
     3. Enable **Console Access**.
     4. Set password (e.g., `Karan@123`).
     5. Skip permissions and create the user.
   - **Outcome**: User created with no permissions, showing "Access Denied" for all services.

2. **Logging in as an IAM User**:
   - **Steps**:
     1. Open a private browser window.
     2. Enter the AWS Account ID, username (`PostDevOps`), and password (`Karan@123`).
     3. Login successful, but all services show "Access Denied".
   - **Note**: Account ID auto-populates if the sign-in URL is shared.

3. **Attaching Policies**:
   - **Steps**:
     1. Go to IAM > **Users** > `PostDevOps` > **Add Permissions**.
     2. Select **Attach Policies**.
     3. Search for `EC2` and attach `AmazonEC2FullAccess`.
     4. Add `IAMFullAccess` similarly.
   - **Outcome**: User gains EC2 and IAM access, with errors disappearing for those services.

4. **Creating a Custom Policy**:
   - **Steps**:
     1. Go to IAM > **Policies** > **Create Policy**.
     2. Choose services (e.g., EC2, IAM).
     3. Specify actions (e.g., Allow `ec2:*`, Deny `iam:DeleteUser`).
     4. Name the policy (e.g., `TestPolicy`).
     5. Create the policy.
   - **Outcome**: A customer-managed policy is created, visible in the policies list.

5. **Creating a Group**:
   - **Steps**:
     1. Go to IAM > **Groups** > **Create Group**.
     2. Name the group (e.g., `2025Batch`).
     3. Attach policies (e.g., `AmazonConnectFullAccess`).
     4. Add users (e.g., `abc`) to the group.
   - **Outcome**: Users in the group inherit the group’s permissions.

6. **Creating a Role**:
   - **Steps**:
     1. Go to IAM > **Roles** > **Create Role**.
     2. Select **AWS Account** as the trusted entity.
     3. Attach policies (e.g., `AdministratorAccess`).
     4. Name the role (e.g., `AdminRole`).
     5. Edit the trust policy to include the user’s ARN (e.g., `arn:aws:iam::123456789012:user/KG`).
     6. Create the role.
   - **Outcome**: The role grants temporary admin access to the user `KG`.

7. **Assuming a Role**:
   - **Steps**:
     1. Log in as the user `KG` (no permissions).
     2. Copy the role’s switch URL from the IAM console.
     3. Paste the URL in the browser and switch to the `AdminRole`.
   - **Outcome**: The user gains admin access for 1 hour, then reverts to no access.

8. **Setting Up MFA**:
   - **Steps**:
     1. Go to IAM > **Users** > `KG` > **Security Credentials** > **Assign MFA**.
     2. Choose **Authenticator App**.
     3. Scan the QR code with Google Authenticator.
     4. Enter the generated code (e.g., `391515`).
     5. Activate MFA.
   - **Outcome**: The user requires an MFA code for login.

9. **Paying AWS Bills**:
   - **Steps**:
     1. Go to **Billing and Cost Management** > **Bills**.
     2. Select the pending payment (e.g., $0.77 for April).
     3. Choose **UPI** as the payment method.
     4. Verify and pay via UPI notification.
   - **Outcome**: Payment completed, ensuring account remains active.

### Participant Questions and Answers
1. **Why use IAM?**
   - To manage users and permissions, ensuring secure access to AWS resources.
2. **What is the Identity Center?**
   - A centralized service for managing user access via SSO (Single Sign-On) or active directories (e.g., Google, GitHub).
3. **Can a user with IAM access add or remove users?**
   - Yes, if granted `IAMFullAccess`, they can add/remove users, similar to HR onboarding employees.
4. **Can an IAM user remove the root user?**
   - No, the root user (owner) cannot be removed, as they have unrestricted control.
5. **If an HR user is removed, are their added users also removed?**
   - No, users added by an HR user remain in the account.
6. **What is the highest level of access for an IAM user?**
   - AdministratorAccess, which grants access to all AWS services but not billing or account closure.
7. **Can multiple admin users be created?**
   - Yes, multiple users can be assigned AdministratorAccess.
8. **How to check a user’s permissions?**
   - Only users with IAM access can view their permissions in the IAM console.
9. **Can custom policies be created?**
   - Yes, for specific norms and regulations, custom policies can be created in JSON or visual editor.
10. **Why create groups?**
    - To assign generic permissions to multiple users centrally, simplifying management.
11. **What is a role?**
    - A temporary access mechanism for users or services, used for demos or service integration.
12. **Can roles be assigned to services?**
    - Yes, to integrate services (e.g., EC2 accessing S3).
13. **What is MFA?**
    - Multi-Factor Authentication, adding security via OTPs or authenticator apps.
14. **Are IAM services free?**
    - Yes, IAM is completely free, including user creation and policy management.
15. **Is IAM a regional or global service?**
    - Global, applicable across all AWS regions.
16. **Why avoid root user for daily tasks?**
    - To prevent critical actions (e.g., shutting down services) that could impact business.
17. **What is the maximum number of IAM users?**
    - No hard limit; AWS can extend quotas (e.g., from 10,000 to 11,000) upon request.
18. **How to handle billing issues?**
    - Check bills in the **Billing and Cost Management** console and pay via UPI or other methods.
19. **Why delete resources after use?**
    - To avoid charges, as free tier access is limited.

### Interview Questions
1. **What is the difference between a user and a role?**
   - **User**: Permanent identity with username/password and assigned permissions.
   - **Role**: Temporary access without credentials, used for demos or service integration.
2. **Can an IAM user with IAM access add/remove users?**
   - Yes, with `IAMFullAccess`, they can manage users.
3. **Can an IAM user remove the root user?**
   - No, the root user is the account owner and cannot be removed.
4. **What is the highest level of access for an IAM user?**
   - AdministratorAccess, granting access to all AWS services except billing and account management.
5. **Can custom policies be created?**
   - Yes, for specific organizational requirements.
6. **How to give generic permissions to multiple users?**
   - Create a group, attach policies, and add users to the group.
7. **What happens if an HR user is removed?**
   - Users they added remain in the account.
8. **How to give temporary access to a user?**
   - Create a role, assign it to the user’s ARN, and let them assume the role.
9. **What is the purpose of MFA?**
   - To enhance security with multi-step authentication (e.g., OTPs).

### Quiz Questions and Answers
1. **What are the different computing models?**
   - Infrastructure as a Service (IaaS), Platform as a Service (PaaS), Software as a Service (SaaS).
2. **How is AWS infrastructure divided?**
   - Regions, Availability Zones, Edge Locations.
3. **Can edge locations or data centers be chosen for usage?**
   - No, only Availability Zones can be chosen.
4. **What is the highest level of access for an IAM user?**
   - AdministratorAccess.
5. **If a user can see but not modify EC2 resources, what access do they have?**
   - Read-only access.
6. **Can all 10 users in an AWS account be admins?**
   - Yes.
7. **How to handle company-specific roles and regulations?**
   - Create custom or inline policies.
8. **How to give generic permissions to multiple users?**
   - Create a group and attach policies.
9. **Can a user be part of multiple groups?**
   - Yes.
10. **Can a user’s password be changed?**
    - Yes, via **Security Credentials** > **Reset Password**.
11. **What computing model is used when deploying an app on Google Play Store?**
    - Platform as a Service (PaaS).
12. **What computing model is used when downloading an app?**
    - Software as a Service (SaaS).

### Additional Notes
- **Next Topic**: EC2 (Elastic Compute Cloud) to be covered on May 12, 2025.
- **Practical Emphasis**: The instructor stressed the importance of hands-on practice, as industry roles prioritize practical skills over theory.
- **Windows Users**: Advised to install Git Bash or Windows Subsystem for Linux (WSL) to run Linux commands for EC2 sessions.
- **Free Tier Usage**: Participants were reminded to delete resources after use to avoid charges, as the free tier is limited.
- **Recordings**: Available 3–4 hours after the session, typically post-midnight.
- **Support**: The instructor provided contact details for queries, emphasizing practical support.

---

## Summary
The AWS IAM training sessions provided a thorough understanding of IAM, covering users, policies, groups, roles, and MFA. Practical demonstrations included creating users, attaching policies, setting up roles, and enabling MFA. The sessions used real-world analogies (e.g., PUBG, Reliance) to clarify concepts and addressed participant queries comprehensively. Interview questions and a quiz reinforced key concepts, preparing participants for industry roles. The emphasis on practical skills and free tier usage ensured participants could apply their learning effectively.